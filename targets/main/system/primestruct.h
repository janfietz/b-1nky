#ifndef PRIMESTRUCT_H
#define PRIMESTRUCT_H

#include "config.h"
#include "sensor.h"
#include "adc.h"


// ******************* IDENTIFIER ********************

typedef enum
{
#ifdef HWP_LED_WHITE_20K
    PS_ANALOG_LED_WHITE_A,
    PS_ANALOG_LED_WHITE_B,
    PS_ANALOG_LED_WHITE_C,
    PS_ANALOG_LED_WHITE_D,
#endif
#ifdef HWP_LED_RED_UNI
    PS_ANALOG_LED_RED_1,
    PS_ANALOG_LED_RED_2,
    PS_ANALOG_LED_RED_3,
    PS_ANALOG_LED_RED_4,
#endif
#ifdef HWP_LED_RED_2K
    PS_ANALOG_LED_RED_C_A,
    PS_ANALOG_LED_RED_C_B,
#endif
#ifdef HWP_LED_WHITE_100K
    PS_ANALOG_LED_WHITE_1,
    PS_ANALOG_LED_WHITE_2,
    PS_ANALOG_LED_WHITE_3,
    PS_ANALOG_LED_WHITE_4,
    PS_ANALOG_LED_WHITE_5,
    PS_ANALOG_LED_WHITE_6,
    PS_ANALOG_LED_WHITE_7,
    PS_ANALOG_LED_WHITE_8,
    PS_ANALOG_LED_WHITE_9,
    PS_ANALOG_LED_WHITE_10,
    PS_ANALOG_LED_WHITE_11,
    PS_ANALOG_LED_WHITE_12,
    PS_ANALOG_LED_WHITE_13,
    PS_ANALOG_LED_WHITE_14,
    PS_ANALOG_LED_WHITE_15,
    PS_ANALOG_LED_WHITE_16,
    PS_ANALOG_LED_WHITE_17,
    PS_ANALOG_LED_WHITE_18,
    PS_ANALOG_LED_WHITE_19,
    PS_ANALOG_LED_WHITE_20,
    PS_ANALOG_LED_WHITE_21,
    PS_ANALOG_LED_WHITE_22,
    PS_ANALOG_LED_WHITE_23,
    PS_ANALOG_LED_WHITE_24,
    PS_ANALOG_LED_WHITE_25,
    PS_ANALOG_LED_WHITE_26,
    PS_ANALOG_LED_WHITE_27,
    PS_ANALOG_LED_WHITE_28,
#endif
    PS_ANALOG_LED_COUNT
} PS_ANALOG_LED_E;

typedef enum
{
    PS_ANALOG_VOLTAGE_MAIN_24V,
    PS_ANALOG_VOLTAGE_MAIN_VCC,
#ifdef HWP_LED_WHITE_100K
    PS_ANALOG_VOLTAGE_SLAVE_1_24V,
    PS_ANALOG_VOLTAGE_SLAVE_1_VCC,
    PS_ANALOG_VOLTAGE_SLAVE_2_24V,
    PS_ANALOG_VOLTAGE_SLAVE_2_VCC,
#endif
    PS_ANALOG_VOLTAGE_COUNT
} PS_ANALOG_VOLTAGE_E;

typedef enum
{
#if defined(HWT_MULTI)
    PS_LED_TEMPERATURE_1,
    PS_LED_TEMPERATURE_2,
    PS_LED_TEMPERATURE_3,
    PS_LED_TEMPERATURE_4,
#elif defined (HWT_MEDIUM_RED)
    PS_LED_TEMPERATURE_1,
#elif defined (HWT_MEDIUM_WHITE)
    PS_LED_TEMPERATURE_1,
    PS_LED_TEMPERATURE_2,
#endif
#ifdef HWP_LED_WHITE_100K
    PS_LED_TEMPERATURE_WHITE_1,
    PS_LED_TEMPERATURE_WHITE_2,
    PS_LED_TEMPERATURE_WHITE_3,
    PS_LED_TEMPERATURE_WHITE_4,
    PS_LED_TEMPERATURE_WHITE_5,
    PS_LED_TEMPERATURE_WHITE_6,
    PS_LED_TEMPERATURE_WHITE_7,
    PS_LED_TEMPERATURE_WHITE_8,
    PS_LED_TEMPERATURE_WHITE_9,
    PS_LED_TEMPERATURE_WHITE_10,
    PS_LED_TEMPERATURE_WHITE_11,
    PS_LED_TEMPERATURE_WHITE_12,
    PS_LED_TEMPERATURE_WHITE_13,
    PS_LED_TEMPERATURE_WHITE_14,
    PS_LED_TEMPERATURE_WHITE_15,
    PS_LED_TEMPERATURE_WHITE_16,
    PS_LED_TEMPERATURE_WHITE_17,
    PS_LED_TEMPERATURE_WHITE_18,
    PS_LED_TEMPERATURE_WHITE_19,
    PS_LED_TEMPERATURE_WHITE_20,
    PS_LED_TEMPERATURE_WHITE_21,
    PS_LED_TEMPERATURE_WHITE_22,
    PS_LED_TEMPERATURE_WHITE_23,
    PS_LED_TEMPERATURE_WHITE_24,
    PS_LED_TEMPERATURE_WHITE_25,
    PS_LED_TEMPERATURE_WHITE_26,
    PS_LED_TEMPERATURE_WHITE_27,
    PS_LED_TEMPERATURE_WHITE_28,
#endif
    PS_LED_TEMPERATURE_COUNT
} PS_LED_TEMPERATURE_E;

typedef enum
{
#if defined(HWP_LED_WHITE_20K) || defined(HWP_LED_RED_UNI) || defined(HWP_LED_RED_2K) || defined(HWP_LED_WHITE_100K)
    PS_BOARD_TEMPERATURE_MAIN,
#endif
#ifdef HWP_LED_WHITE_100K
    PS_BOARD_TEMPERATURE_SLAVE_1,
    PS_BOARD_TEMPERATURE_SLAVE_2,
#endif
    PS_BOARD_TEMPERATURE_COUNT
} PS_BOARD_TEMPERATURE_E;

typedef enum
{
#if defined(HWP_LED_WHITE_20K) || defined(HWP_LED_RED_UNI) || defined(HWP_LED_RED_2K)
    PS_LED_OVERVOLTAGE_BM_MAIN,
#endif
#ifdef HWP_LED_WHITE_100K
    PS_LED_OVERVOLTAGE_BM_SLAVE_1,
    PS_LED_OVERVOLTAGE_BM_SLAVE_2,
#endif
    PS_LED_OVERVOLTAGE_BM_COUNT
} PS_LED_OVERVOLTAGE_BM_E;


// ******************* TYPEDEFS ********************

typedef struct
{
    float           value;
    SENSOR_STATUS_T status;
} PS_SENSOR_T;

typedef struct
{
    float min;
    float max;
    float average;
} PS_MINMAX_T;

#define PS_MINIMUM_RESET_VALUE_1000_VOLT 1000

typedef struct
{
    struct
    {
        struct
        {
            PS_SENSOR_T led[PS_ANALOG_LED_COUNT];
            PS_MINMAX_T local_led_voltages_min_max[ADC_LED_CH_INDEX_COUNT];  // used to detect broken leds and on led status page
            PS_SENSOR_T supply[PS_ANALOG_VOLTAGE_COUNT];
        } analog;
        PS_SENSOR_T led_temperature[PS_LED_TEMPERATURE_COUNT];
        PS_SENSOR_T board_temperature[PS_BOARD_TEMPERATURE_COUNT];
    } sensors;

    struct
    {
        uint16_t led_overvoltage_bm[PS_LED_OVERVOLTAGE_BM_COUNT];
        uint16_t led_voltage_ok_bm[PS_LED_OVERVOLTAGE_BM_COUNT];
    } flags;

} PRIMESTRUCT_T;

#define PRIMESTRUCT_INIT_VOLTAGE_VALUE      0
#define PRIMESTRUCT_INIT_TEMPERATURE_VALUE  0


extern PRIMESTRUCT_T _primestruct;

void PRIMESTRUCT_Init(void);

#endif
