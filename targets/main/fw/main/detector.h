#ifndef DETECTOR_H
#define DETECTOR_H
#include "primestruct.h"



#define DETECTOR_USE_DAYNIGHT_SWITCH    _settings_list_ram[SETTINGS_INDICATOR_GLOOM]

#define DETECTOR_WARN_IF_SENSOR_FAILED      (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_SENS ? 1 : 0)
#define DETECTOR_WARN_IF_VISIBILITY_FAILED  (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_VISI ? 1 : 0)
#define DETECTOR_WARN_IF_GPS_FAILED         (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_GPS ? 1 : 0)
#define DETECTOR_WARN_IF_MESH_FAILED        (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_MESH ? 1 : 0)
#define DETECTOR_WARN_IF_PSU_BUFFERING      (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_BUFFERING ? 1 : 0)
#define DETECTOR_WARN_IF_PSU_COLLECTIVE     (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_COLLECTIVE ? 1 : 0)
#if 0
#define DETECTOR_WARN_IF_PSU_BUFF_OR_ERR (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_BUFF_OR_ERR ? 1 : 0)
#define DETECTOR_WARN_IF_PSU_UPS_BAT_ERR (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_UPS_BAT_ERR ? 1 : 0)
#define DETECTOR_WARN_IF_PSU_VOLTAGE_ERR (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_VOLTAGE_ERR ? 1 : 0)
#define DETECTOR_WARN_IF_PSU_THERMAL_FUSE_ERR (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_THERMAL_FUSE_ERR ? 1 : 0)
#define DETECTOR_WARN_IF_PSU_TEMPERATURE_ERR (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_TEMPERATURE_ERR ? 1 : 0)
#define DETECTOR_WARN_IF_PSU_FAN_EOL (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_FAN_EOL ? 1 : 0)
#define DETECTOR_WARN_IF_PSU_FAN_FILTER_EOL (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_FAN_FILTER_EOL ? 1 : 0)
#define DETECTOR_WARN_IF_PSU_BATTERY_EOL (_settings_list_ram[SETTINGS_INDICATOR_WARN_BITMASK] & SETTINGS_INDICATION_PSU_BATTERY_EOL ? 1 : 0)
#endif

#define FAIL_FLAG_SENSOR        0x01
#define FAIL_FLAG_VISIBILITY    0x02
#define FAIL_FLAG_GPS           0x04
#define FAIL_FLAG_MESH          0x10
#define FAIL_FLAG_PSU_MISSING   0x20
#define FAIL_FLAG_PSU_BUFFERING 0x40

#define FAIL_FLAG2_LED          0x01
#define FAIL_FLAG_CAN           0x20

#define DETECTOR_TIMEOUT_TILL_WARNING_SEC           (300)
#define DETECTOR_INDICATION_WARNING_TIMEOUT         (600)
#define DETECTOR_INDICATION_DAYNIGHT_TIMEOUT        (100)
#define DETECTOR_LED_FAILED_INDICATION_HOLD_TIME    (600)

#define DETECTOR_PM_FAULT_BM        0x07
#define DETECTOR_FAULT_BM_GPS_VCC   0x01
#define DETECTOR_FAULT_BM_GPS_RF    0x02
#define DETECTOR_FAULT_BM_LUX_2_8_V 0x04

#define DETECTOR_WAIT_TIME 100  // wait 100 ms
#define DETECTOR_TASK_DELAY_MS 10 // 10 ms

#define DETECTOR_GET_MUTEX_TIMEOUT_MS 10 // 10 ms

#define DETECTOR_LED_FAIL_FLAG_FRAM_ENTRY_SIZE 2

typedef struct
{
    uint32_t    uWarningFlags;  // used to indicate warnings
    uint8_t     uErrorFlags;  // used to indicate errors
    uint32_t    failure_timestamp;
} DETECTOR_STATUS_T;

typedef enum
{
    DETECTOR_CLEAR_LED_FAIL_FLAGS_RESULT_TIMEOUT = -1,
    DETECTOR_CLEAR_LED_FAIL_FLAGS_RESULT_ERROR_WRITING_FRAM = 0,
    DETECTOR_CLEAR_LED_FAIL_FLAGS_RESULT_OK = 1,
} DETECTOR_CLEAR_LED_FAIL_FLAGS_RESULT_T;

extern DETECTOR_STATUS_T _detector_status;
extern volatile uint8_t _detector_fault_bm;

uint16_t DETECTOR_GetLedStageFailBitmask(PS_LED_OVERVOLTAGE_BM_E bm_index);
uint8_t DETECTOR_GetNumFailedLedStages(void);

DETECTOR_CLEAR_LED_FAIL_FLAGS_RESULT_T DETECTOR_ClearLedFailFlags(portTickType xTicksToWait);

void DETECTOR_GPS_VCC_Fault_IRQHandler(void);
void DETECTOR_GPS_RF_Fault_IRQHandler(void);
void DETECTOR_LUX_2_8_V_Fault_IRQHandler(void);
void DETECTOR_SetCANErrorFlag(void);

void DETECTOR_Create(void);

void DETECTOR_Task(void *pvParameters);

#endif
