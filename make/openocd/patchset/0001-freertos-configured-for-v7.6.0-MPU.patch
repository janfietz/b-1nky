From 7a7f8a109eb201e9194a40c67f8a6137cb22c9d7 Mon Sep 17 00:00:00 2001
From: Vincent Kessler <lilvinz@nscit.com>
Date: Thu, 5 Dec 2013 07:20:43 +0100
Subject: [PATCH] freertos: configured for v7.6.0 + MPU

---
 src/rtos/FreeRTOS.c                | 139 +++++++++++++++++++------------------
 src/rtos/rtos_standard_stackings.c | 108 ++++++++++++++--------------
 2 files changed, 127 insertions(+), 120 deletions(-)

diff --git a/src/rtos/FreeRTOS.c b/src/rtos/FreeRTOS.c
index a8f874f..db1d8e6 100644
--- a/src/rtos/FreeRTOS.c
+++ b/src/rtos/FreeRTOS.c
@@ -34,6 +34,7 @@
 #include "rtos_standard_stackings.h"
 
 #define FREERTOS_MAX_PRIORITIES	63
+#define configMAX_PRIORITIES    5
 
 #define FreeRTOS_STRUCT(int_type, ptr_type, list_prev_offset)
 
@@ -41,12 +42,12 @@ struct FreeRTOS_params {
 	const char *target_name;
 	const unsigned char thread_count_width;
 	const unsigned char pointer_width;
-	const unsigned char list_next_offset;
 	const unsigned char list_width;
-	const unsigned char list_elem_next_offset;
-	const unsigned char list_elem_content_offset;
 	const unsigned char thread_stack_offset;
-	const unsigned char thread_name_offset;
+	const unsigned char xList_pxIndex_offset;
+	const unsigned char xListItem_pvOwner_offset;
+	const unsigned char xListItem_pxNext_offset;
+	const unsigned char tskTCB_pcTaskName_offset;
 	const struct rtos_register_stacking *stacking_info_cm3;
 	const struct rtos_register_stacking *stacking_info_cm3_pad;
 	const struct rtos_register_stacking *stacking_info_cm4f;
@@ -60,12 +61,12 @@ const struct FreeRTOS_params FreeRTOS_params_list[] = {
 	"cortex_m",			/* target_name */
 	4,						/* thread_count_width; */
 	4,						/* pointer_width; */
-	16,						/* list_next_offset; */
-	20,						/* list_width; */
-	8,						/* list_elem_next_offset; */
-	12,						/* list_elem_content_offset */
+	24,						/* list_width; */
 	0,						/* thread_stack_offset; */
-	52,						/* thread_name_offset; */
+	4,						/* xList_pxIndex_offset */
+	16,						/* xListItem_pvOwner_offset */
+	8,						/* xListItem_pxNext_offset */
+	96,						/* tskTCB_pcTaskName_offset */
 	&rtos_standard_Cortex_M3_stacking,			/* stacking_m3_info */
 	&rtos_standard_Cortex_M3_stacking_pad,		/* stacking_m3_info_pad */
 	&rtos_standard_Cortex_M4F_stacking,			/* stacking_m4f_info */
@@ -77,12 +78,12 @@ const struct FreeRTOS_params FreeRTOS_params_list[] = {
 	"hla_target",			/* target_name */
 	4,						/* thread_count_width; */
 	4,						/* pointer_width; */
-	16,						/* list_next_offset; */
-	20,						/* list_width; */
-	8,						/* list_elem_next_offset; */
-	12,						/* list_elem_content_offset */
+	24,						/* list_width; */
 	0,						/* thread_stack_offset; */
-	52,						/* thread_name_offset; */
+	4,						/* xList_pxIndex_offset */
+	16,						/* xListItem_pvOwner_offset */
+	8,						/* xListItem_pxNext_offset */
+	96,						/* tskTCB_pcTaskName_offset */
 	&rtos_standard_Cortex_M3_stacking,			/* stacking_m3_info */
 	&rtos_standard_Cortex_M3_stacking_pad,		/* stacking_m3_info_pad */
 	&rtos_standard_Cortex_M4F_stacking,			/* stacking_m4f_info */
@@ -121,7 +122,7 @@ enum FreeRTOS_symbol_values {
 	FreeRTOS_VAL_xTasksWaitingTermination = 7,
 	FreeRTOS_VAL_xSuspendedTaskList = 8,
 	FreeRTOS_VAL_uxCurrentNumberOfTasks = 9,
-	FreeRTOS_VAL_uxTopUsedPriority = 10,
+	FreeRTOS_VAL_uxTopReadyPriority = 10,
 };
 
 static char *FreeRTOS_symbol_list[] = {
@@ -135,7 +136,7 @@ static char *FreeRTOS_symbol_list[] = {
 	"xTasksWaitingTermination",
 	"xSuspendedTaskList",
 	"uxCurrentNumberOfTasks",
-	"uxTopUsedPriority",
+	"uxTopReadyPriority",
 	NULL
 };
 
@@ -243,18 +244,7 @@ static int FreeRTOS_update_threads(struct rtos *rtos)
 	}
 
 	/* Find out how many lists are needed to be read from pxReadyTasksLists, */
-	int64_t max_used_priority = 0;
-	retval = target_read_buffer(rtos->target,
-			rtos->symbols[FreeRTOS_VAL_uxTopUsedPriority].address,
-			param->pointer_width,
-			(uint8_t *)&max_used_priority);
-	if (retval != ERROR_OK)
-		return retval;
-	if (max_used_priority > FREERTOS_MAX_PRIORITIES) {
-		LOG_ERROR("FreeRTOS maximum used priority is unreasonably big, not proceeding: %" PRId64 "",
-			max_used_priority);
-		return ERROR_FAIL;
-	}
+	int64_t max_used_priority = configMAX_PRIORITIES;
 
 	symbol_address_t *list_of_lists =
 		(symbol_address_t *)malloc(sizeof(symbol_address_t) *
@@ -275,7 +265,11 @@ static int FreeRTOS_update_threads(struct rtos *rtos)
 	list_of_lists[num_lists++] = rtos->symbols[FreeRTOS_VAL_xSuspendedTaskList].address;
 	list_of_lists[num_lists++] = rtos->symbols[FreeRTOS_VAL_xTasksWaitingTermination].address;
 
+	LOG_DEBUG("num_lists = %i", num_lists);
+
 	for (i = 0; i < num_lists; i++) {
+		LOG_DEBUG("list_of_lists[%d] = 0x%08X", i, (unsigned int)list_of_lists[i]);
+
 		if (list_of_lists[i] == 0)
 			continue;
 
@@ -291,6 +285,8 @@ static int FreeRTOS_update_threads(struct rtos *rtos)
 			return retval;
 		}
 
+		LOG_DEBUG("list_thread_count = %i", (int)list_thread_count);
+
 		if (list_thread_count == 0)
 			continue;
 
@@ -298,7 +294,7 @@ static int FreeRTOS_update_threads(struct rtos *rtos)
 		uint64_t prev_list_elem_ptr = -1;
 		uint64_t list_elem_ptr = 0;
 		retval = target_read_buffer(rtos->target,
-				list_of_lists[i] + param->list_next_offset,
+				list_of_lists[i] + param->xList_pxIndex_offset,
 				param->pointer_width,
 				(uint8_t *)&list_elem_ptr);
 		if (retval != ERROR_OK) {
@@ -310,10 +306,13 @@ static int FreeRTOS_update_threads(struct rtos *rtos)
 		while ((list_thread_count > 0) && (list_elem_ptr != 0) &&
 				(list_elem_ptr != prev_list_elem_ptr) &&
 				(tasks_found < thread_list_size)) {
+
+			LOG_DEBUG("list_elem_ptr = 0x%08X", (unsigned int)list_elem_ptr);
+
 			/* Get the location of the thread structure. */
 			rtos->thread_details[tasks_found].threadid = 0;
 			retval = target_read_buffer(rtos->target,
-					list_elem_ptr + param->list_elem_content_offset,
+					list_elem_ptr + param->xListItem_pvOwner_offset,
 					param->pointer_width,
 					(uint8_t *)&(rtos->thread_details[tasks_found].threadid));
 			if (retval != ERROR_OK) {
@@ -322,48 +321,54 @@ static int FreeRTOS_update_threads(struct rtos *rtos)
 				return retval;
 			}
 
-			/* get thread name */
-
-			#define FREERTOS_THREAD_NAME_STR_SIZE (200)
-			char tmp_str[FREERTOS_THREAD_NAME_STR_SIZE];
-
-			/* Read the thread name */
-			retval = target_read_buffer(rtos->target,
-					rtos->thread_details[tasks_found].threadid + param->thread_name_offset,
-					FREERTOS_THREAD_NAME_STR_SIZE,
-					(uint8_t *)&tmp_str);
-			if (retval != ERROR_OK) {
-				LOG_ERROR("Error reading first thread item location in FreeRTOS thread list");
-				free(list_of_lists);
-				return retval;
+			LOG_DEBUG("threadid = 0x%08X", (unsigned int)rtos->thread_details[tasks_found].threadid);
+
+			/* skip unused entries */
+			if (rtos->thread_details[tasks_found].threadid != 0)
+			{
+				/* get thread name */
+
+				#define FREERTOS_THREAD_NAME_STR_SIZE (200)
+				char tmp_str[FREERTOS_THREAD_NAME_STR_SIZE];
+
+				/* Read the thread name */
+				retval = target_read_buffer(rtos->target,
+						rtos->thread_details[tasks_found].threadid + param->tskTCB_pcTaskName_offset,
+						FREERTOS_THREAD_NAME_STR_SIZE,
+						(uint8_t *)&tmp_str);
+				if (retval != ERROR_OK) {
+					LOG_ERROR("Error reading thread name");
+					free(list_of_lists);
+					return retval;
+				}
+				tmp_str[FREERTOS_THREAD_NAME_STR_SIZE-1] = '\x00';
+
+				if (tmp_str[0] == '\x00')
+					strcpy(tmp_str, "No Name");
+
+				rtos->thread_details[tasks_found].thread_name_str =
+					(char *)malloc(strlen(tmp_str)+1);
+				strcpy(rtos->thread_details[tasks_found].thread_name_str, tmp_str);
+				rtos->thread_details[tasks_found].display_str = NULL;
+				rtos->thread_details[tasks_found].exists = true;
+
+				if (rtos->thread_details[tasks_found].threadid == rtos->current_thread) {
+					char running_str[] = "Running";
+					rtos->thread_details[tasks_found].extra_info_str = (char *) malloc(
+							sizeof(running_str));
+					strcpy(rtos->thread_details[tasks_found].extra_info_str,
+						running_str);
+				} else
+					rtos->thread_details[tasks_found].extra_info_str = NULL;
+
+				tasks_found++;
+				list_thread_count--;
 			}
-			tmp_str[FREERTOS_THREAD_NAME_STR_SIZE-1] = '\x00';
-
-			if (tmp_str[0] == '\x00')
-				strcpy(tmp_str, "No Name");
-
-			rtos->thread_details[tasks_found].thread_name_str =
-				(char *)malloc(strlen(tmp_str)+1);
-			strcpy(rtos->thread_details[tasks_found].thread_name_str, tmp_str);
-			rtos->thread_details[tasks_found].display_str = NULL;
-			rtos->thread_details[tasks_found].exists = true;
-
-			if (rtos->thread_details[tasks_found].threadid == rtos->current_thread) {
-				char running_str[] = "Running";
-				rtos->thread_details[tasks_found].extra_info_str = (char *) malloc(
-						sizeof(running_str));
-				strcpy(rtos->thread_details[tasks_found].extra_info_str,
-					running_str);
-			} else
-				rtos->thread_details[tasks_found].extra_info_str = NULL;
-
-			tasks_found++;
-			list_thread_count--;
 
 			prev_list_elem_ptr = list_elem_ptr;
 			list_elem_ptr = 0;
 			retval = target_read_buffer(rtos->target,
-					prev_list_elem_ptr + param->list_elem_next_offset,
+					prev_list_elem_ptr + param->xListItem_pxNext_offset,
 					param->pointer_width,
 					(uint8_t *)&list_elem_ptr);
 			if (retval != ERROR_OK) {
diff --git a/src/rtos/rtos_standard_stackings.c b/src/rtos/rtos_standard_stackings.c
index 2105c24..b176d0c 100644
--- a/src/rtos/rtos_standard_stackings.c
+++ b/src/rtos/rtos_standard_stackings.c
@@ -24,23 +24,25 @@
 
 #include "rtos.h"
 
+// offset of 4 bytes added for extra register which is being saved by FreeRTOS MPU port
+
 static const struct stack_register_offset rtos_standard_Cortex_M3_stack_offsets[] = {
-	{ 0x20, 32 },		/* r0   */
-	{ 0x24, 32 },		/* r1   */
-	{ 0x28, 32 },		/* r2   */
-	{ 0x2c, 32 },		/* r3   */
-	{ 0x00, 32 },		/* r4   */
-	{ 0x04, 32 },		/* r5   */
-	{ 0x08, 32 },		/* r6   */
-	{ 0x0c, 32 },		/* r7   */
-	{ 0x10, 32 },		/* r8   */
-	{ 0x14, 32 },		/* r9   */
-	{ 0x18, 32 },		/* r10  */
-	{ 0x1c, 32 },		/* r11  */
-	{ 0x30, 32 },		/* r12  */
+	{ 0x20 + 4, 32 },		/* r0   */
+	{ 0x24 + 4, 32 },		/* r1   */
+	{ 0x28 + 4, 32 },		/* r2   */
+	{ 0x2c + 4, 32 },		/* r3   */
+	{ 0x00 + 4, 32 },		/* r4   */
+	{ 0x04 + 4, 32 },		/* r5   */
+	{ 0x08 + 4, 32 },		/* r6   */
+	{ 0x0c + 4, 32 },		/* r7   */
+	{ 0x10 + 4, 32 },		/* r8   */
+	{ 0x14 + 4, 32 },		/* r9   */
+	{ 0x18 + 4, 32 },		/* r10  */
+	{ 0x1c + 4, 32 },		/* r11  */
+	{ 0x30 + 4, 32 },		/* r12  */
 	{ -2,   32 },		/* sp   */
-	{ 0x34, 32 },		/* lr   */
-	{ 0x38, 32 },		/* pc   */
+	{ 0x34 + 4, 32 },		/* lr   */
+	{ 0x38 + 4, 32 },		/* pc   */
 	{ -1,   96 },		/* FPA1 */
 	{ -1,   96 },		/* FPA2 */
 	{ -1,   96 },		/* FPA3 */
@@ -50,26 +52,26 @@ static const struct stack_register_offset rtos_standard_Cortex_M3_stack_offsets[
 	{ -1,   96 },		/* FPA7 */
 	{ -1,   96 },		/* FPA8 */
 	{ -1,   32 },		/* FPS  */
-	{ 0x3c, 32 },		/* xPSR */
+	{ 0x3c + 4, 32 },		/* xPSR */
 };
 
 static const struct stack_register_offset rtos_standard_Cortex_M4F_stack_offsets[] = {
-	{ 0x24, 32 },		/* r0   */
-	{ 0x28, 32 },		/* r1   */
-	{ 0x2c, 32 },		/* r2   */
-	{ 0x30, 32 },		/* r3   */
-	{ 0x00, 32 },		/* r4   */
-	{ 0x04, 32 },		/* r5   */
-	{ 0x08, 32 },		/* r6   */
-	{ 0x0c, 32 },		/* r7   */
-	{ 0x10, 32 },		/* r8   */
-	{ 0x14, 32 },		/* r9   */
-	{ 0x18, 32 },		/* r10  */
-	{ 0x1c, 32 },		/* r11  */
-	{ 0x34, 32 },		/* r12  */
+	{ 0x24 + 4, 32 },		/* r0   */
+	{ 0x28 + 4, 32 },		/* r1   */
+	{ 0x2c + 4, 32 },		/* r2   */
+	{ 0x30 + 4, 32 },		/* r3   */
+	{ 0x00 + 4, 32 },		/* r4   */
+	{ 0x04 + 4, 32 },		/* r5   */
+	{ 0x08 + 4, 32 },		/* r6   */
+	{ 0x0c + 4, 32 },		/* r7   */
+	{ 0x10 + 4, 32 },		/* r8   */
+	{ 0x14 + 4, 32 },		/* r9   */
+	{ 0x18 + 4, 32 },		/* r10  */
+	{ 0x1c + 4, 32 },		/* r11  */
+	{ 0x34 + 4, 32 },		/* r12  */
 	{ -2,   32 },		/* sp   */
-	{ 0x38, 32 },		/* lr   */
-	{ 0x3c, 32 },		/* pc   */
+	{ 0x38 + 4, 32 },		/* lr   */
+	{ 0x3c + 4, 32 },		/* pc   */
 	{ -1,   96 },		/* FPA1 */
 	{ -1,   96 },		/* FPA2 */
 	{ -1,   96 },		/* FPA3 */
@@ -83,22 +85,22 @@ static const struct stack_register_offset rtos_standard_Cortex_M4F_stack_offsets
 };
 
 static const struct stack_register_offset rtos_standard_Cortex_M4F_FPU_stack_offsets[] = {
-	{ 0x64, 32 },		/* r0   */
-	{ 0x68, 32 },		/* r1   */
-	{ 0x6c, 32 },		/* r2   */
-	{ 0x70, 32 },		/* r3   */
-	{ 0x00, 32 },		/* r4   */
-	{ 0x04, 32 },		/* r5   */
-	{ 0x08, 32 },		/* r6   */
-	{ 0x0c, 32 },		/* r7   */
-	{ 0x10, 32 },		/* r8   */
-	{ 0x14, 32 },		/* r9   */
-	{ 0x18, 32 },		/* r10  */
-	{ 0x1c, 32 },		/* r11  */
-	{ 0x74, 32 },		/* r12  */
+	{ 0x64 + 4, 32 },		/* r0   */
+	{ 0x68 + 4, 32 },		/* r1   */
+	{ 0x6c + 4, 32 },		/* r2   */
+	{ 0x70 + 4, 32 },		/* r3   */
+	{ 0x00 + 4, 32 },		/* r4   */
+	{ 0x04 + 4, 32 },		/* r5   */
+	{ 0x08 + 4, 32 },		/* r6   */
+	{ 0x0c + 4, 32 },		/* r7   */
+	{ 0x10 + 4, 32 },		/* r8   */
+	{ 0x14 + 4, 32 },		/* r9   */
+	{ 0x18 + 4, 32 },		/* r10  */
+	{ 0x1c + 4, 32 },		/* r11  */
+	{ 0x74 + 4, 32 },		/* r12  */
 	{ -2,   32 },		/* sp   */
-	{ 0x78, 32 },		/* lr   */
-	{ 0x7c, 32 },		/* pc   */
+	{ 0x78 + 4, 32 },		/* lr   */
+	{ 0x7c + 4, 32 },		/* pc   */
 	{ -1,   96 },		/* FPA1 */
 	{ -1,   96 },		/* FPA2 */
 	{ -1,   96 },		/* FPA3 */
@@ -108,7 +110,7 @@ static const struct stack_register_offset rtos_standard_Cortex_M4F_FPU_stack_off
 	{ -1,   96 },		/* FPA7 */
 	{ -1,   96 },		/* FPA8 */
 	{ -1,   32 },		/* FPS  */
-	{ 0x80, 32 },		/* xSPR */
+	{ 0x80 + 4, 32 },		/* xSPR */
 };
 
 static const struct stack_register_offset rtos_standard_Cortex_R4_stack_offsets[] = {
@@ -141,7 +143,7 @@ static const struct stack_register_offset rtos_standard_Cortex_R4_stack_offsets[
 };
 
 const struct rtos_register_stacking rtos_standard_Cortex_M3_stacking = {
-	0x40,					/* stack_registers_size */
+	0x40 + 4,					/* stack_registers_size */
 	-1,					/* stack_growth_direction */
 	26,					/* num_output_registers */
 	0,					/* stack_alignment */
@@ -149,7 +151,7 @@ const struct rtos_register_stacking rtos_standard_Cortex_M3_stacking = {
 };
 
 const struct rtos_register_stacking rtos_standard_Cortex_M3_stacking_pad = {
-	0x44,					/* stack_registers_size */
+	0x44 + 4,					/* stack_registers_size */
 	-1,					/* stack_growth_direction */
 	26,					/* num_output_registers */
 	0,					/* stack_alignment */
@@ -157,7 +159,7 @@ const struct rtos_register_stacking rtos_standard_Cortex_M3_stacking_pad = {
 };
 
 const struct rtos_register_stacking rtos_standard_Cortex_M4F_stacking = {
-	0x44,					/* stack_registers_size, ignore the additional 16 fpu registers */
+	0x44 + 4,					/* stack_registers_size, ignore the additional 16 fpu registers */
 	-1,					/* stack_growth_direction */
 	26,					/* num_output_registers */
 	0,					/* stack_alignment */
@@ -165,7 +167,7 @@ const struct rtos_register_stacking rtos_standard_Cortex_M4F_stacking = {
 };
 
 const struct rtos_register_stacking rtos_standard_Cortex_M4F_stacking_pad = {
-	0x48,					/* stack_registers_size, ignore the additional 16 fpu registers */
+	0x48 + 4,					/* stack_registers_size, ignore the additional 16 fpu registers */
 	-1,					/* stack_growth_direction */
 	26,					/* num_output_registers */
 	0,					/* stack_alignment */
@@ -173,7 +175,7 @@ const struct rtos_register_stacking rtos_standard_Cortex_M4F_stacking_pad = {
 };
 
 const struct rtos_register_stacking rtos_standard_Cortex_M4F_FPU_stacking = {
-	0xcc,					/* stack_registers_size, ignore the additional 16 fpu registers */
+	0xcc + 4,					/* stack_registers_size, ignore the additional 16 fpu registers */
 	-1,					/* stack_growth_direction */
 	26,					/* num_output_registers */
 	0,					/* stack_alignment */
@@ -181,7 +183,7 @@ const struct rtos_register_stacking rtos_standard_Cortex_M4F_FPU_stacking = {
 };
 
 const struct rtos_register_stacking rtos_standard_Cortex_M4F_FPU_stacking_pad = {
-	0xd0,					/* stack_registers_size, ignore the additional 16 fpu registers */
+	0xd0 + 4,					/* stack_registers_size, ignore the additional 16 fpu registers */
 	-1,					/* stack_growth_direction */
 	26,					/* num_output_registers */
 	0,					/* stack_alignment */
-- 
1.8.1.2

